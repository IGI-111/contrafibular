use std::char;

#[derive(Clone)]
pub enum Instruction {
    Noop,
    Push(u8),
    Add,
    Subtract,
    Multiply,
    Divide,
    Modulo,
    Not,
    Greater,
    Right,
    Left,
    Up,
    Down,
    Random,
    HorizontalIf,
    VerticalIf,
    StringMode,
    Dup,
    Swap,
    Pop,
    PopInt,
    PopChar,
    Bridge,
    Get,
    Put,
    PushInt,
    PushChar,
    End,
    Unknown(char),
}

impl Instruction {
    pub fn to_char(&self) -> char {
        match *self {
            Instruction::Push(n) => char::from_digit(n as u32, 10).unwrap(),
            Instruction::Noop => ' ',
            Instruction::Add => '+',
            Instruction::Subtract => '-',
            Instruction::Multiply => '*',
            Instruction::Divide => '/',
            Instruction::Modulo => '%',
            Instruction::Not => '!',
            Instruction::Greater => '`',
            Instruction::Right => '>',
            Instruction::Left => '<',
            Instruction::Up => '^',
            Instruction::Down => 'v',
            Instruction::Random => ' ',
            Instruction::HorizontalIf => '_',
            Instruction::VerticalIf => '|',
            Instruction::StringMode => '"',
            Instruction::Dup => ':',
            Instruction::Swap => '\\',
            Instruction::Pop => '$',
            Instruction::PopInt => '.',
            Instruction::PopChar => ',',
            Instruction::Bridge => '#',
            Instruction::Get => 'p',
            Instruction::Put => 'g',
            Instruction::PushInt => '&',
            Instruction::PushChar => '~',
            Instruction::End => '@',
            Instruction::Unknown(c) => c,
        }
    }

    pub fn from_char(c: char) -> Instruction {
        match c {
            n @ '0'...'9' => Instruction::Push(n.to_digit(10).unwrap() as u8),
            ' ' => Instruction::Noop,
            '+' => Instruction::Add,
            '-' => Instruction::Subtract,
            '*' => Instruction::Multiply,
            '/' => Instruction::Divide,
            '%' => Instruction::Modulo,
            '!' => Instruction::Not,
            '`' => Instruction::Greater,
            '>' => Instruction::Right,
            '<' => Instruction::Left,
            '^' => Instruction::Up,
            'v' => Instruction::Down,
            '?' => Instruction::Random,
            '_' => Instruction::HorizontalIf,
            '|' => Instruction::VerticalIf,
            '"' => Instruction::StringMode,
            ':' => Instruction::Dup,
            '\\' => Instruction::Swap,
            '$' => Instruction::Pop,
            '.' => Instruction::PopInt,
            ',' => Instruction::PopChar,
            '#' => Instruction::Bridge,
            'p' => Instruction::Get,
            'g' => Instruction::Put,
            '&' => Instruction::PushInt,
            '~' => Instruction::PushChar,
            '@' => Instruction::End,
            c => Instruction::Unknown(c),
        }
    }
}
