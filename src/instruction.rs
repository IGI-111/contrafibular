#[derive(Clone, Debug)]
pub enum Instruction {
    Noop,
    Push(u8),
    Add,
    Subtract,
    Multiply,
    Divide,
    Modulo,
    Not,
    Greater,
    Right,
    Left,
    Up,
    Down,
    Random,
    HorizontalIf,
    VerticalIf,
    StringMode,
    Dup,
    Swap,
    Pop,
    PopInt,
    PopChar,
    Bridge,
    Get,
    Put,
    PushInt,
    PushChar,
    End,
    Unknown(u8),
}

impl Instruction {
    pub fn to_u8(&self) -> u8 {
        match *self {
            Instruction::Push(n) => b'0' + n,
            Instruction::Noop => b' ',
            Instruction::Add => b'+',
            Instruction::Subtract => b'-',
            Instruction::Multiply => b'*',
            Instruction::Divide => b'/',
            Instruction::Modulo => b'%',
            Instruction::Not => b'!',
            Instruction::Greater => b'`',
            Instruction::Right => b'>',
            Instruction::Left => b'<',
            Instruction::Up => b'^',
            Instruction::Down => b'v',
            Instruction::Random => b' ',
            Instruction::HorizontalIf => b'_',
            Instruction::VerticalIf => b'|',
            Instruction::StringMode => b'"',
            Instruction::Dup => b':',
            Instruction::Swap => b'\\',
            Instruction::Pop => b'$',
            Instruction::PopInt => b'.',
            Instruction::PopChar => b',',
            Instruction::Bridge => b'#',
            Instruction::Get => b'g',
            Instruction::Put => b'p',
            Instruction::PushInt => b'&',
            Instruction::PushChar => b'~',
            Instruction::End => b'@',
            Instruction::Unknown(b) => b,
        }
    }

    pub fn from_u8(b: u8) -> Instruction {
        match b {
            n @ b'0'...b'9' => Instruction::Push(n - b'0'),
            b' ' => Instruction::Noop,
            b'+' => Instruction::Add,
            b'-' => Instruction::Subtract,
            b'*' => Instruction::Multiply,
            b'/' => Instruction::Divide,
            b'%' => Instruction::Modulo,
            b'!' => Instruction::Not,
            b'`' => Instruction::Greater,
            b'>' => Instruction::Right,
            b'<' => Instruction::Left,
            b'^' => Instruction::Up,
            b'v' => Instruction::Down,
            b'?' => Instruction::Random,
            b'_' => Instruction::HorizontalIf,
            b'|' => Instruction::VerticalIf,
            b'"' => Instruction::StringMode,
            b':' => Instruction::Dup,
            b'\\' => Instruction::Swap,
            b'$' => Instruction::Pop,
            b'.' => Instruction::PopInt,
            b',' => Instruction::PopChar,
            b'#' => Instruction::Bridge,
            b'g' => Instruction::Get,
            b'p' => Instruction::Put,
            b'&' => Instruction::PushInt,
            b'~' => Instruction::PushChar,
            b'@' => Instruction::End,
            b => Instruction::Unknown(b),
        }
    }
}
